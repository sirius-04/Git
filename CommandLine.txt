ls = list the files & folders in the current folder

cd (folder path) = change directory

git init = initialize (setup) Git in the folder

git status = tell us what changes have been made since the previous version

TO ADD A VERSION TO VERSION HISTORY {
    git add (filename)= pick which changes we want in our next version

    . = the whole current folder
        git add . = add the whole folder into the next version

    git commit -m "describe the version changes" = to create a new version. Commit means version. -m means attaching message to that commit
    May encounter this error: 
        Author identity unknown

        *** Please tell me who you are.

        Run

        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"

        to set your account's default identity.
        Omit --global to set the identity only in this repository.

        fatal: unable to auto-detect email address (got 'Chan Yong Liang@YongLiang-Laptop.(none)')
    To fix that:
        git config --global user.email "chan.yongliang7406@gmail.com"
        git config --global user.name "Chan Yong Liang"

    git log = to view version history
}

TO MAKE CHANGES ON PREVIOUS COMMIT MADE {
    git add (filename or .)
    git commit -m"Version1" --amend (--amend means the changes will be applied on the previous commit instead of creating a new one)
}

STAGE {
    git add (filename or .) = add them to staged CHANGES
    git reset (filename or .) = remove them from the staged changes
    git checkout -- (filename or .) = undo the changes
}

TO GO BACK TO PREVIOUS CERTAIN VERSION {
    git checkout (commit hash) = to view back the previous certain version
    git log --all = view ALL version history
    git log --all --graph = to visualize the branching
    git checkout master = to go back to the latest version
}

TO LINK WITH GITHUB {
    make sure the directory is correct
    git remote add (nickname) (the repo link on github in http) = to link the local and remote repo together
    git remote = to check which repo is linked
    git remote -v = more detailed (v = verbose)
    git remote remove (repo nickname) = remove the remote repo
}

PUSH {
    git config --global credential.username "(github username)" = to tell our username
    git push (repo nickname) (branch name) = push your branch to github
}

GIT IGNORE {
    to hide the files from being uploaded to github
    create a .gitignore file
    write the filename inside the .gitignore
}

GIT CLONE {
    make sure in the directory u wish
    git clone (repo http link) (folder name) = to create a clone on the dir
}